# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

fpath=(
    $HOME/.zfunc
    $fpath
)

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="half-life" # set by `omz`

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to display red dots whilst waiting for completion.
# Caution: this setting can cause issues with multiline prompts (zsh 5.7.1 and newer seem to work)
# See https://github.com/ohmyzsh/ohmyzsh/issues/5765
COMPLETION_WAITING_DOTS="true"

CASE_SENSITIVE="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Disable auto update (managed by chezmoi)
DISABLE_AUTO_UPDATE="true"

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    fnm
    git
    docker
    docker-compose
    mvn
    kubectl
    rust
    sbt
    scala
    sdk
    tmux
    tmux-cssh
    bazel
    npm
    nvm
    vi-mode
    golang
    helm
    ripgrep
    gradle
)

source $ZSH/oh-my-zsh.sh

export ZSH_COMPDUMP=$ZSH/cache/.zcompdump-$HOST

### User configuration
eval "$(direnv hook zsh)"

### Helm install
export HELM_EXPERIMENTAL_OCI=1

### XDG
export XDG_CONFIG_HOME=$HOME/.config

### Exports
export EDITOR=nvim
export BROWSER=google-chrome
export MYVIMRC="$XDG_CONFIG_HOME/nvim/init.lua"
export MYZSHRC="$HOME/.zshrc"
export MYTMUXCONF="$HOME/.tmux.conf"

export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .class'

export LC_CTYPE=UTF-8
export LANGUAGE=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

export PATH="$PATH:/home/snipy/.local/share/coursier/bin"

export CONFIG_DIR="$HOME/.config/lazygit"

# export LANGUAGE=en_GB.UTF-8
# export LANG=en_GB.UTF-8
# export LC_ALL=en_GB.UTF-8



# add the given directory to PATH if it exists
function updatePath() {
    [ -d $1 ] && export PATH="$PATH:$1"
}

# source the given file if it exists
function sourceIfExists() {
    [ -f $1 ] && source $1
}

updatePath "$HOME/.cargo/bin"
updatePath "$HOME/bin"
updatePath "$HOME/go/bin"
updatePath "/usr/local/go/bin"
updatePath "${HOME}/.local/bin"

# 10ms for key sequences
KEYTIMEOUT=1

autoload -U edit-command-line
zle -N edit-command-line
bindkey -M vicmd v edit-command-line

#### Aliases
alias v="nvim"
alias nvi="nvim"
alias vim="nvim"
alias vi="nvim"
alias nv="nvim"
alias emacs="nvim"
alias vscode="nvim"
alias code="nvim"
alias vs="nvim"

function vg() {
    nvim -o $(git status --porcelain | awk '{print $2}')
}

alias f=fzf
alias rr="source $HOME/.zshrc"
alias lg="lazygit"
alias cl="clear"


# ls aliases, exa is cool
alias l="exa --long --icons"
alias ls="exa --long --icons"
alias la="exa -a --long --icons"

alias b="bazel"
alias bb="bazel build"
alias bq="bazel query"
alias bt="bazel test"

alias bbb="bazel build //..."
alias btt="bazel test //..."

alias vimrc="chezmoi edit $MYVIMRC"
alias zshrc="chezmoi edit $MYZSHRC"
alias tmuxconf="chezmoi edit $MYTMUXCONF"
alias conf="chezmoi edit $XDG_CONFIG_HOME"

# dotfiles management aliases
alias c="chezmoi"
alias ccd="cd $HOME/.local/share/chezmoi"
alias cconf="chezmoi edit $XDG_CONFIG_HOME/chezmoi/chezmoi.toml"
alias "cd-"="cd -"

# lua
alias luamake=/home/snipy/.cache/nvim/lspconfig/lua-language-server/3rd/luamake/luamake

# git aliases and function
alias gfix="git commit -a --amend --no-edit"
alias "gc-"="git checkout -"
alias gwl="git worktree list"
alias gsp="git stash push"
alias gsP="git stash pop"
alias gclean="git branch -vv | grep ': gone' | grep -v '(\+\|\*)' | awk '{print $1}' | xargs -r git branch -D"

# function gitFixCommit() {
#   COMMIT=$1
#   BRANCH=$(echo $1 | sed -e 's/[:!?]//g' -e 's/ /_/g' -e 's/DET-\(.*\)/DET-\L\1/')
#   echo "git switch -c ${BRANCH}"
#   echo "git commit -a -m ${COMMIT}"
# }

function gitDetBranch() {
    JIRA_ID=${1}
    BRANCH_NAME=${2}
    git checkout main
    git pull --rebase
    git switch -c "DET-${JIRA_ID}_${BRANCH_NAME}" main
}

function gitRebaseMain() {
    git checkout main
    git pull --rebase
    git checkout -
    git rebase main
}

# .gitignore
function gi() { curl -sLw n https://www.gitignore.io/api/$@ ;}

# golang

export PATH="$HOME/.gobrew/current/bin:$HOME/.gobrew/bin:$PATH"
export GOROOT="$HOME/.gobrew/current/go"
export GOPATH="$HOME/go"
export GOBIN="$GOPATH/bin"

updatePath "${GOBIN}"

# jetbrains scripts
updatePath "$HOME/.local/share/JetBrains/Toolbox/scripts"

# kubectl completion if available
[ -e /usr/local/bin/kubectl ] && source <(kubectl completion zsh)

# function klogs() {
#   kubectl -n imatch get pods -l app=$1 --no-headers | awk '{print $1}' | xargs kubectl -n imatch logs
# }


function k9() {
    tmux new-window -c ${PWD} -n "k9s-${$1}"
}

# neovim
export NEOVIM_HOME="$HOME/dev/neovim"
function NeovimUpdate() {
    pushd $NEOVIM_HOME
    git pull --rebase
    make CMAKE_BUILD_TYPE=Release
    sudo make install
    popd
}

# github cli
compctl -K _gh gh

# Example use : aoc day02 scala3
# Available lang :
# - rust
# - scala3
function aoc() {
    DAY=$1
    LANG=$2

    case "${LANG}" in
        rust)
            if [[ -d "rust/${DAY}" ]] ; then echo "${DAY} already exists..." && return 1 ; fi
            mkdir -p "rust/${DAY}"
            pushd "rust/${DAY}"
            cargo init --name "${DAY}" --bin --vcs=none --color=always
            popd
            ;;
        scala3)
            if [[ -d "scala3/${DAY}" ]] ; then echo "${DAY} already exists..." && return 1 ; fi
            mkdir -p "scala3/${DAY}"
            pushd "scala3"
            g8 scala/scala3.g8 -o "${DAY}" --name="${DAY}"
            popd
            ;;
        *)
            echo "Usage : aoc \$day\$ (rust|scala3)"
            return 1
    esac
}

### Pyenv (for neovim)
if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init -)"
fi

# some secret sourcing
sourceIfExists "$HOME/.ghcup/env"
sourceIfExists "$HOME/.fzf.zsh"
sourceIfExists "$HOME/.sdkman/bin/sdkman-init.sh"
sourceIfExists "$HOME/.cargo/env"

sourceIfExists "/usr/share/doc/fzf/examples/key-bindings.zsh"

# ondir start
eval_ondir() {
    eval "`ondir \"$OLDPWD\" \"$PWD\"`"
}
chpwd_functions=( eval_ondir $chpwd_functions )

# java native-image executables
export PATH="/home/snipy/dev/ktfmt-exec/bin:$PATH"
export PATH="/home/snipy/dev/diktat-exec/bin:$PATH"

# fnm
export PATH="/home/snipy/.local/share/fnm:$PATH"
eval "`fnm env`"
fpath+=${ZDOTDIR:-~}/.zsh_functions

export NVM_DIR="$HOME/.config/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Add JBang to environment
alias j!=jbang
export PATH="$HOME/.jbang/bin:$PATH"
