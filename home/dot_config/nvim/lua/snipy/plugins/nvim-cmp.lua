-- local has_words_before = function()
--   local line, col = unpack(vim.api.nvim_win_get_cursor(0))
--   return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
-- end
--
return {
  --   {
  --     "hrsh7th/nvim-cmp",
  --     enabled = false,
  --     dependencies = {
  --       "chrisgrieser/cmp-nerdfont",
  --       "hrsh7th/cmp-buffer",
  --       "hrsh7th/cmp-cmdline",
  --       "hrsh7th/cmp-git",
  --       "hrsh7th/cmp-nvim-lsp",
  --       "hrsh7th/cmp-nvim-lsp-signature-help",
  --       "hrsh7th/cmp-path",
  --       "max397574/cmp-greek",
  --       "onsails/lspkind-nvim",
  --       { "saadparwaiz1/cmp_luasnip", dependencies = { "L3MON4D3/LuaSnip" } },
  --       -- "rcarriga/cmp-dap",
  --     },
  --     config = function()
  --       local cmp = require("cmp")
  --       local lspkind = require("lspkind")
  --       local luasnip = require("luasnip")
  --
  --       cmp.setup({
  --         formatting = {
  --           format = lspkind.cmp_format({
  --             mode = "symbol",
  --             maxwidth = 50,
  --             ellipsis_char = "...",
  --           }),
  --         },
  --         mapping = {
  --           ["<C-Space>"] = cmp.mapping.complete(),
  --           ["<CR>"] = cmp.mapping(function(fallback)
  --             if cmp.visible() and cmp.get_active_entry() then
  --               cmp.confirm({ behavior = cmp.ConfirmBehavior.Replace, select = true })
  --             else
  --               fallback()
  --             end
  --           end, { "i", "n", "s" }),
  --           ["<Tab>"] = cmp.mapping(function(fallback)
  --             if cmp.visible() then
  --               cmp.select_next_item()
  --             else
  --               fallback()
  --             end
  --           end, { "i", "s" }),
  --           ["<S-Tab>"] = cmp.mapping(function(fallback)
  --             if cmp.visible() then
  --               cmp.select_prev_item()
  --             else
  --               fallback()
  --             end
  --           end, { "i", "s" }),
  --         },
  --         enabled = function()
  --           return vim.api.nvim_get_option_value("buftype", { buf = 0 }) ~= "prompt" -- or require("cmp_dap").is_dap_buffer()
  --         end,
  --         sources = cmp.config.sources({
  --           { name = "nvim_lua" },
  --           { name = "nvim_lsp" },
  --           { name = "nvim_lsp_document_symbol" },
  --           { name = "path" },
  --           { name = "luasnip" },
  --           -- { name = "dap" },
  --           { name = "greek" },
  --           { name = "buffer", keyword_length = 2 },
  --           { name = "nerdfont" },
  --         }),
  --         snippet = {
  --           expand = function(args)
  --             require("luasnip").lsp_expand(args.body)
  --           end,
  --         },
  --         experimental = {
  --           native_menu = false,
  --           ghost_text = false,
  --         },
  --       })
  --
  --       cmp.setup.filetype("gitcommit", {
  --         sources = cmp.config.sources({
  --           { name = "cmp_git" },
  --         }, {
  --           { name = "buffer" },
  --         }),
  --       })
  --
  --       cmp.setup.cmdline("/", {
  --         mapping = cmp.mapping.preset.cmdline(),
  --         sources = {
  --           { name = "buffer" },
  --         },
  --       })
  --
  --       cmp.setup.cmdline(":", {
  --         mapping = cmp.mapping.preset.cmdline(),
  --         sources = cmp.config.sources({
  --           { name = "path" },
  --         }, {
  --           { name = "cmdline" },
  --         }),
  --       })
  --     end,
  --   },
}
